"""
JacobiGQ(Œ±::Float64,Œ≤::Float64,N::Int)

return the N'th Gau√ü quadrature points
"""
function JacobiGQ(Œ±::Float64,Œ≤::Float64,N::Int)
    if (N == 0)
        return QuadratureFormula(-(Œ±-Œ≤)/(Œ±+Œ≤+2.), 2.)
    end
    J = zeros(N+1)
    h‚ÇÅ = 2*(0:N) .+ Œ± .+ Œ≤
    J = diagm(0 => -1/2*(Œ±^2-Œ≤^2)./(h‚ÇÅ.+2)./h‚ÇÅ)
    J += diagm(1 => 2. ./(h‚ÇÅ[1:N].+2.) .* .‚àö((1:N).*((1:N) .+ Œ± .+ Œ≤) .* ((1:N) .+ Œ±) .* ((1:N) .+ Œ≤) ./ (h‚ÇÅ[1:N] .+ 1.) ./ (h‚ÇÅ[1:N] .+ 3.)))
    if (Œ± + Œ≤ < 10 * eps(1.) )
        J[1,1] = 0.0
    end 
    J = J + J';
    F = eigen!(J)
    points = F.values
    weights = (F.vectors[1,:]).^2*2^(Œ±+Œ≤+1)/(Œ±+Œ≤+1)*gamma(Œ±+1)*gamma(Œ≤+1)/gamma(Œ≤+Œ±+1)
    return QuadratureFormula(points, weights)
end

"""
integrate(f,q)

computes the numerical approximation of the integral of f on the interval [-1,1] using q as a Quadrature formula

"""
function integrate(f, q::QuadratureFormula)
    return sum(f.(q.points).*q.weights)
end

"""
JacobiGL(Œ±::Float64, Œ≤::Float64, N::Int)

Compute the N'th order Gau√ü Lobatto quadrature formula points
"""
function JacobiGL(Œ±::Float64, Œ≤::Float64, N::Int)
    x = zeros(N + 1, 1)
    if (N == 1)
        return  [-1.,1.]
    end
    gq= JacobiGQ(Œ± + 1, Œ≤ + 1, N - 2)
    x = [-1; gq.points; 1]
end

"""
JacobiP(x::Array{Float64,1},Œ±::Float64,Œ≤::Float64,N::Int)

evaluates the Jacobi polynomial of type (Œ±,Œ≤) > -1 (Œ±+Œ≤ ‚â¢ -1) at points x for order N 
Note : the Jacobi polynomial is normalize by a factor Œ≥‚Çô = ‚àö(2/(2n+1))
adapted from nodal-dg matlab code [https://github.com/tcew/nodal-dg]
"""
function JacobiP(x::Array{Float64,1},Œ±::Float64,Œ≤::Float64,N::Int)
xp = copy(x)
# Turn points into row if needed.
PL = zeros(N+1,size(xp,1))
# alias
Œ≥ = gamma
# Initial values P_0(x) and P_1(x)
Œ≥0 = 2. .^(Œ±+Œ≤+1.)/(Œ±+Œ≤+1)*Œ≥(Œ±+1)*Œ≥(Œ≤+1)/Œ≥(Œ±+Œ≤+1)
PL[1,:] .= 1.0/‚àöŒ≥0
if (N==0)
    return PL[N+1,:]
end
Œ≥1 = (Œ±+1)*(Œ≤+1)/(Œ±+Œ≤+3)*Œ≥0;
PL[2,:] = ((Œ±+Œ≤+2)*xp/2 .+ (Œ±-Œ≤)/2)/‚àöŒ≥1; # todo : @view or @inbounds ??
if (N==1)
  return PL[N+1,:]
end

# Repeat value in recurrence.
a‚Çã = 2/(2+Œ±+Œ≤)*‚àö((Œ±+1)*(Œ≤+1)/(Œ±+Œ≤+3))

# Forward recurrence using the symmetry of the recurrence.
for i=1:N-1
  h1 = 2*i+Œ±+Œ≤
  a‚Çä = 2/(h1+2.)*‚àö((i+1)*(i+1+Œ±+Œ≤)*(i+1+Œ±)*(i+1+Œ≤)/(h1+1)/(h1+3))
  b‚Çä = - (Œ±^2-Œ≤^2)/h1/(h1+2)
  PL[i+2,:] = 1/a‚Çä*((xp.-b‚Çä).*PL[i+1,:] -a‚Çã*PL[i,:])
  a‚Çã =a‚Çä
end
P = PL[N+1,:]
end

"""
Legendre(n::Int64, x::Array{Float64}, derive::Bool=true) computes the matrices
```math
P_{ij} = P^j(x_i)
```
and 
```math
P'_{ij} = \\frac{dP^j}{dx}(x_i)
```
where
```math
P^n(x) = \\frac{1}{2^nn!}\\frac{d^n}{dx^n}\\left((x^2-1)^n\\right)
```
Note 
"""
function Legendre(n::Int64, x::Array{Float64,1}, derive::Bool=true)
  Œ≥ = 2 ./(2(0:n).+1.)'
  P = zeros(size(x, 1), n + 1)
  P¬π = zeros(size(x, 1), n + 1)
  P[:, 1] = ones(size(x))
  P[:, 2] = x
  if (derive)
    P¬π[:, 1] = zeros(size(x))
    P¬π[:, 2] = ones(size(x))
  end
  for i=3:n+1
    P[:, i] = (2*i-3.)/(i-1) .* x .* P[:,i-1] - (i-2.)/(i-1) .* P[:, i - 2]
    if (derive)
      P¬π[:, i] = (2*i-3.)/(i-1) .* (P[:,i-1] + x .* P¬π[:, i - 1]) - (i-2.)/(i-1) .* P¬π[:, i - 2]
    end
  end
  if (derive)
    return P./ .‚àöŒ≥,P¬π ./ .‚àöŒ≥
  else
    return P./ .‚àöŒ≥ 
  end
end


# 2D functions

"""
rsToAb(r::Array{Float64,1}, s::Array{Float64,1})
changes (r,s) coordinates to (a,b) coordinates
"""
function rsToAb(r::Array{Float64, 1}, s::Array{Float64, 1})
    a = 2 * (1. .+ r) ./ (1 .- s ) .- 1.
    b = copy(s)
    a[s.==1.] .= -1.
    return a, b
end


"""
npToN(np::Int64)
"""
function npToN(np::Int64)
  convert(Int64,(‚àö(1+8np)-3)/2)
end


function Vander2D(N::Int64, r::Array{Float64,1}, s::Array{Float64,1})
  a,b = rstoab(r,s)
  hcat([‚àö2 * JacobiP(a,0.,0.,i) .* JacobiP(b, 0., 2*i+1., j) .* (1 .- b).^i 
        for i=0:N for j=0:N-i]...)
end
"""
WarpFactor(N::Int64, rout::Array{Float64,1})
compute the warping function as defined p. 177 in Warburton-Hesthaven
"""
function WarpFactor(N::Int64, rout::Array{Float64,1})

# Compute LGL and equidistant node distribution
LGLr = JacobiGL(0.,0.,N)
req  = LinRange(-1.,1.,N+1)

# Compute V based on req
ùì• = hcat([JacobiP([req;],0.,0.,i) for i=0:N]...) # TODO : check if we can use legendre here

# Evaluate Lagrange polynomial at rout
Pmat = hcat([JacobiP(rout,0.,0.,i) for i=0:N]...)
Lmat = ùì•'\Pmat'

# Compute warp factor
warp = Lmat'*(LGLr - req)

# Scale factor
zerof = (abs.(rout) .< (1.0-1.e-10))
sf = 1.0 .- (zerof.*rout).^2
warp = warp./sf + warp.*(zerof.-1.)

end

""" 
function xyToRs(x::Array{Float64,1}, y::Array{Float64,1})
convert (x,y) coords in equilateral triangle to (r,s) coordinates 
standard triangle I = [(-1,-1), (1,-1), (-1,1)]
"""
function xyToRs(x::Array{Float64,1}, y::Array{Float64,1})

Œª1 = (      ‚àö3y .+ 1)/3
Œª2 = (-3x - ‚àö3y .+ 2)/6
Œª3 = ( 3x - ‚àö3y .+ 2)/6

return  -Œª2 + Œª3 - Œª1, -Œª2 - Œª3 + Œª1

end

"""
nodes2D(N::Int64)
computes the interpolation nodes (x,y) nodes in equilateral triangle for polynomial of order N             
"""
function nodes2D(N::Int64)

    Œ±_opt = [0.0000, 0.0000, 1.4152, 0.1001, 0.2751, 0.9800, 1.0999, 
             1.2832, 1.3648, 1.4773, 1.4959, 1.5743, 1.5770, 1.6223, 1.6258]
    # Set optimized parameter, Œ± depending on order N 
    if (N<16) 
        Œ± = Œ±_opt[N]
    else 
        Œ± = 5/3.
    end

    # total number of nodes
    Np = (N+1)*(N+2)√∑2

    # Create equidistributed nodes on equilateral triangle
    Œª1 = zeros(Np) 
    Œª2 = zeros(Np) 
    Œª3 = zeros(Np)

    sk = 1
    for n=1:N+1
        for m=1:N+2-n
            Œª1[sk] = (n-1)/N 
            Œª3[sk] = (m-1)/N
            sk = sk+1;
        end
    end

    Œª2 = 1.0 .-Œª1 .-Œª3
    x = -Œª2 + Œª3
    y = (-Œª2 -Œª3 +2Œª1)/sqrt(3.0)

    # Compute blending function at each node for each edge
    blend1 = 4Œª2.* Œª3
    blend2 = 4Œª1.* Œª3
    blend3 = 4Œª1.* Œª2

    # Amount of warp for each node, for each edge
    warpf1 = WarpFactor(N, Œª3 - Œª2) 
    warpf2 = WarpFactor(N, Œª1 - Œª3) 
    warpf3 = WarpFactor(N, Œª2 - Œª1)

    # Combine blend & warp
    warp1 = blend1.*warpf1.*(1. .+ (Œ± * Œª1).^2)
    warp2 = blend2.*warpf2.*(1. .+ (Œ± * Œª2).^2)
    warp3 = blend3.*warpf3.*(1. .+ (Œ± * Œª3).^2)

    # Accumulate deformations associated with each edge
    x = x + 1*warp1 + cos(2*œÄ/3)*warp2 + cos(4*œÄ/3)*warp3
    y = y + 0*warp1 + sin(2*œÄ/3)*warp2 + sin(4*œÄ/3)*warp3
    
    return x,y
end


"""
computes flux integral 
"""
function ùìî(fMask::Array{Int64,2}, r::Array{Float64, 1}, s::Array{Float64, 1})

  nFaces = 3
  np = length(r)
  n = npToN(np)
  nfp = size(fMask, 1) # number of points on a edge
  eMat = zeros(np, nFaces * nfp)

  for i=1:nFaces-1
    faceR = r[fMask[:,1]]
    ùì• = Legendre(n, faceR, false) 
    mEdge = inv(ùì• * ùì•')
    eMat[fMask[:,i], 1+(i-1)*nfp:i*nfp] = mEdge
  end

  i = 3 
  faceS = s[fMask[:,3]]
  ùì• = Legendre(n, faceS, false) 
  mEdge = inv(ùì• * ùì•')
  eMat[fMask[:,i], 1+(i-1)*nfp:i*nfp] = mEdge

  return eMat

end
