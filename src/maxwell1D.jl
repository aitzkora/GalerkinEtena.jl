"""
structure for modelizing the 1D Maxwell's equation
```math
\\varepsilon(x)\\frac{\\partialE}{\\partial t}  = - \\frac{\\partialH}{\\partial x}  \\mbox{ and }
\\mu(x)\\frac{\\partialH}{\\partial t}  = - \\frac{\\partialE}{\\partial x} 
```
"""
struct Maxwell1D
    m::SimplexMesh{1}
    Œæ::RefGrid{1}
    x::Matrix{Float64}
    vmapM::Vector{Int64}
    vmapP::Vector{Int64}
    vmapB::Vector{Int64}
    mapB::Vector{Int64}
    nx::Matrix{Float64}
    rx::Matrix{Float64}
    ùìì·µ£::Matrix{Float64}
    fScale::Matrix{Float64}
    lift::Matrix{Float64}
    Œµ::Matrix{Float64}
    Œº::Matrix{Float64}

    function Maxwell1D(m::SimplexMesh{1}, Œæ::RefGrid{1})
        nx = normals(m)
        x, vmapM, vmapP = discretize(m, Œæ)

        mapB  = findall( vmapM .== vmapP )
        vmapB = vmapM[ vmapM .== vmapP ]

        fmask = mask(Œæ)

        ùì•, ùìì·µ£ = elementaryMatrices(Œæ)
        J = ùìì·µ£ * x
        rx = 1. ./ J
        fScale = 1. ./ J[fmask, :]
        lift = ùì• * ùì•' * ùìî(fmask, Œæ)
       
        K_2 = convert(Int64, m.K / 2)
        Œµ‚ÇÅ = [ ones(1, K_2) 2*ones(1, K_2) ]
        Œº‚ÇÅ = ones(1, m.K)

        Œµ = ones(Œæ.Np, 1) * Œµ‚ÇÅ
        Œº = ones(Œæ.Np, 1) * Œº‚ÇÅ 

        # create the object
        new(m, Œæ, x, vmapM, vmapP, vmapB, mapB, nx, rx, ùìì·µ£, fScale, lift, Œµ, Œº)
    end
end


"""
compute the right hand side of the maxwell equation u = [E, H]
"""
function rhs1D(pb::Maxwell1D, u::Matrix{Float64}, t::Float64)
    m_u_2 = convert(Int64, floor(size(u, 1) / 2))
    E = u[1:m_u_2,:]
    H = u[m_u_2+1:end,:]

    Zimp = sqrt.(pb.Œº ./pb.Œµ)

    dE = zeros(2, pb.m.K)
    dE[:] = E[pb.vmapM] - E[pb.vmapP]

    dH = zeros(2, pb.m.K)
    dH[:] = H[pb.vmapM] - H[pb.vmapP]

    Zimpm = zeros(2, pb.m.K)
    Zimpm[:] = Zimp[pb.vmapM]

    Zimpp = zeros(2, pb.m.K)
    Zimpp[:] = Zimp[pb.vmapP]

    Yimpm = zeros(2, pb.m.K)
    Yimpm[:] = 1. ./ Zimpm[:]

    Yimpp = zeros(2, pb.m.K)
    Yimpp[:] = 1. ./ Zimpp[:]

    # Homogenenous Boundary Conditions Ez=0

    Ebc = -E[pb.vmapB] 
    dE[pb.mapB] = E[pb.vmapB] - Ebc
    Hbc = H[pb.vmapB]
    dH[pb.mapB] = H[pb.vmapB] - Hbc

    # evaluate upwind fluxes 
    fluxE = 1. ./ (Zimpm + Zimpp ) .* (pb.nx .* Zimpp .* dH - dE)
    fluxH = 1. ./ (Yimpm + Yimpp ) .* (pb.nx .* Yimpp .* dE - dH)

    # compute right hand sides of the PDE's 
    rhsE = (-pb.rx .* (pb.ùìì·µ£*H) + pb.lift * (pb.fScale .* fluxE)) ./ pb.Œµ
    rhsH = (-pb.rx .* (pb.ùìì·µ£*E) + pb.lift * (pb.fScale .* fluxH)) ./ pb.Œº
    
    rhs = [ rhsE; rhsH ]
    return rhs
end

