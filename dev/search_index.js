var documenterSearchIndex = {"docs":
[{"location":"#GalerkinEtena.jl","page":"Documentation","title":"GalerkinEtena.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Documentation for GalerkinEtena.jl","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [GalerkinEtena]\nOrder   = [:type, :function]","category":"page"},{"location":"#GalerkinEtena.Advec1D","page":"Documentation","title":"GalerkinEtena.Advec1D","text":"structure for modelizing the 1D advection equation\n\nfracpartialupartial t + a fracpartialpartial x = 0\n\nwith\n\nu(x0) = sin (x) \nu(0t) = -sin (a t)\n\n\n\n\n\n","category":"type"},{"location":"#GalerkinEtena.Maxwell1D","page":"Documentation","title":"GalerkinEtena.Maxwell1D","text":"structure for modelizing the 1D Maxwell's equation\n\nvarepsilon(x)fracpartialEpartial t  = - fracpartialHpartial x  mbox and \nmu(x)fracpartialHpartial t  = - fracpartialEpartial x \n\n\n\n\n\n","category":"type"},{"location":"#GalerkinEtena.DGDiscretization-Tuple{Mesh1D,Array{Float64,N} where N}","page":"Documentation","title":"GalerkinEtena.DGDiscretization","text":"[x, vmapM, vmapP] =  DGDiscretization(m::Mesh1D, Œæ::Array{Float64,1})\n\nreturn a DG discretization along the mesh and the local discretization Œæ x is of size (#Œæ, K ) vmapP and vmapP is a vector of size 2*K, if we reshape into a (2,K), matrix, then [vmapM[1, i], vmapM[2, i]] are the indices of internal vertices of the i element [vmapP[1, i], vmapP[2, i]] are the indices of external vertices of the i element\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.JacobiGL-Tuple{Float64,Float64,Int64}","page":"Documentation","title":"GalerkinEtena.JacobiGL","text":"JacobiGL(Œ±::Float64, Œ≤::Float64, N::Int)\n\nCompute the N'th order Gau√ü Lobatto quadrature formula points\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.JacobiGQ-Tuple{Float64,Float64,Int64}","page":"Documentation","title":"GalerkinEtena.JacobiGQ","text":"JacobiGQ(Œ±::Float64,Œ≤::Float64,N::Int)\n\nreturn the N'th Gau√ü quadrature points\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.JacobiP-Tuple{Array{Float64,1},Float64,Float64,Int64}","page":"Documentation","title":"GalerkinEtena.JacobiP","text":"JacobiP(x::Array{Float64,1},Œ±::Float64,Œ≤::Float64,N::Int)\n\nevaluates the Jacobi polynomial of type (Œ±,Œ≤) > -1 (Œ±+Œ≤ ‚â¢ -1) at points x for order N  Note : the Jacobi polynomial is normalize by a factor Œ≥‚Çô = ‚àö(2/(2n+1)) adapted from nodal-dg matlab code [https://github.com/tcew/nodal-dg]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.Legendre","page":"Documentation","title":"GalerkinEtena.Legendre","text":"Legendre(n::Int64, x::Array{Float64}, derive::Bool=true) computes the matrices\n\nP_ij = P^j(x_i)\n\nand \n\nP_ij = fracdP^jdx(x_i)\n\nwhere\n\nP^n(x) = frac12^nnfracd^ndx^nleft((x^2-1)^nright)\n\nNote \n\n\n\n\n\n","category":"function"},{"location":"#GalerkinEtena.WarpFactor-Tuple{Int64,Array{Float64,1}}","page":"Documentation","title":"GalerkinEtena.WarpFactor","text":"WarpFactor(N::Int64, rout::Array{Float64,1}) compute the warping function as defined p. 177 in Warburton-Hesthaven\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.computeElementaryMatrices-Tuple{Array{Float64,1},Int64}","page":"Documentation","title":"GalerkinEtena.computeElementaryMatrices","text":"computeElementaryMatrices(Œæ::Array{Float64,1}, Np::Int) computes the elementary matrices  ùì•, ùìì·µ£ on the Gau√ü-Lobatto grid on [-1,1]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.computeMask-Tuple{Array{Float64,1}}","page":"Documentation","title":"GalerkinEtena.computeMask","text":"computeMask(Œæ::Array{Float64,1}) retrieves the index of the boundary nodes on the reference element\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.genGrid-Tuple{Mesh1D,Array{Float64,N} where N}","page":"Documentation","title":"GalerkinEtena.genGrid","text":"genGrid(m::Mesh1D, Œæ::Array{Float64}) generate a (#Œæ,K) matrix corresponding to all degree of freedom points :\n\nG_ij = x^k_i in D^k\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.integrate-Tuple{Any,GalerkinEtena.QuadratureFormula}","page":"Documentation","title":"GalerkinEtena.integrate","text":"integrate(f,q)\n\ncomputes the numerical approximation of the integral of f on the interval [-1,1] using q as a Quadrature formula\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.nodes2D-Tuple{Int64}","page":"Documentation","title":"GalerkinEtena.nodes2D","text":"nodes2D(N::Int64) computes the interpolation nodes (x,y) nodes in equilateral triangle for polynomial of order N             \n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.npToN-Tuple{Int64}","page":"Documentation","title":"GalerkinEtena.npToN","text":"npToN(np::Int64)\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rhs1D-Tuple{Advec1D,Array{Float64,2},Float64,Float64,Float64}","page":"Documentation","title":"GalerkinEtena.rhs1D","text":"compute the right hand side of the advection problem\n\nfracdu_h^kdt = -a mathcalD_r u^_h^k-(mathcalM^k)^-1 + \n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rhs1D-Tuple{Maxwell1D,Array{Float64,2},Float64}","page":"Documentation","title":"GalerkinEtena.rhs1D","text":"compute the right hand side of the maxwell equation u = [E, H]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rsToAb-Tuple{Array{Float64,1},Array{Float64,1}}","page":"Documentation","title":"GalerkinEtena.rsToAb","text":"rsToAb(r::Array{Float64,1}, s::Array{Float64,1}) changes (r,s) coordinates to (a,b) coordinates\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.xyToRs-Tuple{Array{Float64,1},Array{Float64,1}}","page":"Documentation","title":"GalerkinEtena.xyToRs","text":"function xyToRs(x::Array{Float64,1}, y::Array{Float64,1}) convert (x,y) coords in equilateral triangle to (r,s) coordinates  standard triangle I = [(-1,-1), (1,-1), (-1,1)]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.ùìî-Tuple{Array{Int64,2},Array{Float64,1},Array{Float64,1}}","page":"Documentation","title":"GalerkinEtena.ùìî","text":"computes flux integral \n\n\n\n\n\n","category":"method"}]
}
