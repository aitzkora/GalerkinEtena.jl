var documenterSearchIndex = {"docs":
[{"location":"#GalerkinEtena.jl","page":"Documentation","title":"GalerkinEtena.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Documentation for GalerkinEtena.jl","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [GalerkinEtena]\nOrder   = [:type, :function]","category":"page"},{"location":"#GalerkinEtena.Advec","page":"Documentation","title":"GalerkinEtena.Advec","text":"structure for modelizing the 1D advection equation\n\nfracpartial upartial t + a fracpartial upartial x = 0\n\nwith\n\nu(x0) = sin (x) \nu(0t) = -sin (a t)\n\n\n\n\n\n","category":"type"},{"location":"#GalerkinEtena.Maxwell1D","page":"Documentation","title":"GalerkinEtena.Maxwell1D","text":"structure for modelizing the 1D Maxwell's equation\n\nvarepsilon(x)fracpartial Epartial t  = - fracpartial Hpartial x  mbox and \nmu(x)fracpartial Hpartial t  = - fracpartial Epartial x \n\n\n\n\n\n","category":"type"},{"location":"#GalerkinEtena.RefGrid","page":"Documentation","title":"GalerkinEtena.RefGrid","text":"type for discretisation in r,s,t coordinates\n\n\n\n\n\n","category":"type"},{"location":"#GalerkinEtena.JacobiGL-Tuple{Float64, Float64, Int64}","page":"Documentation","title":"GalerkinEtena.JacobiGL","text":"JacobiGL(Œ±::Float64, Œ≤::Float64, N::Int)\n\ncomputes the N'th order Gau√ü Lobatto quadrature formula points\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.JacobiGQ-Tuple{Float64, Float64, Int64}","page":"Documentation","title":"GalerkinEtena.JacobiGQ","text":"JacobiGQ(Œ±::Float64,Œ≤::Float64,N::Int)\n\nreturn the N'th Gau√ü quadrature points\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.JacobiP-Tuple{Vector{Float64}, Float64, Float64, Int64}","page":"Documentation","title":"GalerkinEtena.JacobiP","text":"JacobiP(x::Vector{Float64}, Œ±::Float64, Œ≤::Float64, N::Int)\n\nevaluates the Jacobi polynomial of type (Œ±,Œ≤) > -1 (Œ±+Œ≤ ‚â¢ -1) at points x for order N \n\nNote : the Jacobi polynomial is normalize by a factor Œ≥‚Çô = sqrtfrac22n+1 adapted from nodal-dg\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.Legendre","page":"Documentation","title":"GalerkinEtena.Legendre","text":"Legendre(n::Int64, x::Array{Float64}, derive::Bool=true)\n\ncomputes the two matrices (if derive is true, otherwise just P)\n\nP_ij = P^j(x_i) qquad and qquad  P_ij = fracdP^jdx(x_i)\n\nwhere\n\nP^n(x) = frac12^nnfracd^ndx^nleft((x^2-1)^nright)\n\n\n\n\n\n","category":"function"},{"location":"#GalerkinEtena.WarpFactor-Tuple{Int64, Vector{Float64}}","page":"Documentation","title":"GalerkinEtena.WarpFactor","text":"WarpFactor(N::Int64, rout::Vector{Float64}) compute the warping function as defined p. 177 in Warburton-Hesthaven\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.discretize-Tuple{SimplexMesh{1}, RefGrid{1}}","page":"Documentation","title":"GalerkinEtena.discretize","text":"[x, vmapM, vmapP] =  discretize(m::SimplexMesh{1}, Œæ::RefGrid{1})\n\nreturn a DG discretization along the mesh and the local discretization Œæ x is of size (#Œæ, K ) vmapP and vmapP is a vector of size 2*K, if we reshape into a (2,K), matrix, then [vmapM[1, i], vmapM[2, i]] are the indices of internal vertices of the i element [vmapP[1, i], vmapP[2, i]] are the indices of external vertices of the i element\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.elementaryMatrices-Tuple{RefGrid{1}}","page":"Documentation","title":"GalerkinEtena.elementaryMatrices","text":"elementaryMatrices(Œæ::RefGrid{1})\n\ncomputes the elementary matrices ùì•, ùìì·µ£ on the Gau√ü-Lobatto grid on I‚ÇÅ = [-1,1]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.integrate-Tuple{Any, GalerkinEtena.QuadratureFormula}","page":"Documentation","title":"GalerkinEtena.integrate","text":"integrate(f,q)\n\ncomputes the numerical approximation of the integral of f on the interval [-1,1] using q as a Quadrature formula\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.mask-Tuple{RefGrid{1}}","page":"Documentation","title":"GalerkinEtena.mask","text":"mask(Œæ::RefGrid{1})\n\nretrieves the index of the boundary nodes on the reference element\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.nodes2D-Tuple{Int64}","page":"Documentation","title":"GalerkinEtena.nodes2D","text":"nodes2D(N::Int64) computes the interpolation nodes (x,y) nodes in equilateral triangle for polynomial of order N             \n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.npToN-Tuple{Int64}","page":"Documentation","title":"GalerkinEtena.npToN","text":"npToN(np::Int64)\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.refGrid1D-Tuple{Float64, Float64, Int64}","page":"Documentation","title":"GalerkinEtena.refGrid1D","text":"RefGrid1D(a::Float64, b::Float64, N::Int64)\n\ninitialize a 1D grid reference on [a,b] with a N order polynomial\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rhs1D-Tuple{Advec{1}, Matrix{Float64}, Float64, Float64, Float64}","page":"Documentation","title":"GalerkinEtena.rhs1D","text":"rhs1D(ad::Advec1D, u::Array{Float64,2}, t::Float64, a::Float64, Œ±::Float64)\n\ncomputes the right hand side of the advection problem\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rhs1D-Tuple{Maxwell1D, Matrix{Float64}, Float64}","page":"Documentation","title":"GalerkinEtena.rhs1D","text":"compute trhs1D(pb::Maxwell1D, u::Array{Float64,2}, t::Float64)\n\ncompute the right hand side of the maxwell equation with  u = [E, H]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.rsToAb-Tuple{Vector{Float64}, Vector{Float64}}","page":"Documentation","title":"GalerkinEtena.rsToAb","text":"rsToAb(r::Vector{Float64}, s::Vector{Float64}) changes (r,s) coordinates to (a,b) coordinates\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.xyToRs-Tuple{Vector{Float64}, Vector{Float64}}","page":"Documentation","title":"GalerkinEtena.xyToRs","text":"function xyToRs(x::Vector{Float64}, y::Vector{Float64}) convert (x,y) coords in equilateral triangle to (r,s) coordinates  standard triangle I = [(-1,-1), (1,-1), (-1,1)]\n\n\n\n\n\n","category":"method"},{"location":"#GalerkinEtena.ùìî-Tuple{Matrix{Int64}, Vector{Float64}, Vector{Float64}}","page":"Documentation","title":"GalerkinEtena.ùìî","text":"computes flux integral \n\n\n\n\n\n","category":"method"}]
}
